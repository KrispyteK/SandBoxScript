

struct StringIterator {
	index = -1 
	string = ""

	fn init (str) {
		self.string = str
	}
}

impl Iterator for StringIterator {
	fn Current () {
		return self.string[self.index]
	}

	fn Next () {
		self.index = self.index + 1

		return self.string[self.index]
	}

	fn HasNext () {
		return self.index + 1 < self.string.Length
	}

	fn Reset () {
		self.index = -1
	}
}

impl Enumerable for String {	
	fn GetIterator () {
		return StringIterator(self)
	}
}

fn ForEach (enumerable, action) {
	if (enumerable is Enumerable) {
		iterator = enumerable.GetIterator()
		iterator.Reset()

		while (iterator.HasNext()) {
			item = iterator.Next()

			action(item)
		}
	} else {
		print("Input object is not an Enumerable.")
	}
}	


string = "hello world"
stringArray = string.ToArray()

print("// Array")
benchmark(() => { ForEach (stringArray, (i) => a = i) }, 1000)

print("// String")
benchmark(() => { ForEach (string, (i) => a = i) }, 1000)