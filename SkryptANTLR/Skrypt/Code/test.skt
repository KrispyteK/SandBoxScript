
struct Test {
	value = 1

	fn init (v) {
		self.value = v 
	}
}

impl Add for Test {
	fn Add (lhs, rhs) {
		print(lhs)
		print(rhs)

		result = lhs.value + rhs.value

		print(result)

		return Test(lhs.value + rhs.value)
	}
}

a = Test(1)
b = Test(3)

print(a)
print(b)
print(Test(4))

/*
struct StringIterator {
	index = -1 
	string = ""

	fn init (str) self.string = str
}

impl Iterator for StringIterator {
	fn Current ()	self.string[self.index] 
	fn Next ()		self.string[++self.index]
	fn HasNext ()	self.index + 1 < self.string.Length
	fn Reset ()		self.index = -1
}

impl Enumerable for String {	
	fn GetIterator () StringIterator(self)
}

fn ForEach (enumerable, action) {
	if (enumerable is Enumerable) {
		iterator = enumerable.GetIterator()
		iterator.Reset()

		while (iterator.HasNext()) {
			item = iterator.Next()

			action(item)
		}
	} else {
		print("Input object is not an Enumerable.")
	}
}


wdawd = [1,2,3]

ForEach(wdawd, (i) => print(i))

wdawd = "hello world"

ForEach(wdawd, (i) => print(i))
*/