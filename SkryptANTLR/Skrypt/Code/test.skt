

struct StringIterator {
	index = -1 
	string = ""

	fn init (str) {
		self.string = str
	}
}

impl Iterator for StringIterator {
	fn Current () {
		return self.string[self.index]
	}

	fn Next () {
		self.index = self.index + 1

		return self.string[self.index]
	}

	fn HasNext () {
		return self.index + 1 < self.string.Length
	}

	fn Reset () {
		self.index = -1
	}
}

impl Enumerable for String {	
	fn GetIterator () {
		return StringIterator(self)
	}
}

str = "hello world"

iterator = str.GetIterator()

benchmark (() => {
while (iterator.HasNext()) {
	item = iterator.Next()
}
}, 10000)
